-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity in_out_c_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 65
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of in_out_c_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111111111", 1 => "11111111100", 2 => "11111110010", 
    3 => "11111100110", 4 => "11111100101", 5 => "11111110111", 
    6 => "00000001101", 7 => "00000001110", 8 => "11111111010", 
    9 => "11111101110", 10 => "11111111110", 11 => "00000010011", 
    12 => "00000001001", 13 => "11111101100", 14 => "11111101011", 
    15 => "00000001110", 16 => "00000011110", 17 => "11111111010", 
    18 => "11111010111", 19 => "11111110101", 20 => "00000101111", 
    21 => "00000100001", 22 => "11111010000", 23 => "11110111110", 
    24 => "00000100100", 25 => "00001101100", 26 => "11111111010", 
    27 => "11101001111", 28 => "11110101110", 29 => "00101110001", 
    30 to 31=> "01100101101", 32 => "00101110001", 33 => "11110101110", 
    34 => "11101001111", 35 => "11111111010", 36 => "00001101100", 
    37 => "00000100100", 38 => "11110111110", 39 => "11111010000", 
    40 => "00000100001", 41 => "00000101111", 42 => "11111110101", 
    43 => "11111010111", 44 => "11111111010", 45 => "00000011110", 
    46 => "00000001110", 47 => "11111101011", 48 => "11111101100", 
    49 => "00000001001", 50 => "00000010011", 51 => "11111111110", 
    52 => "11111101110", 53 => "11111111010", 54 => "00000001110", 
    55 => "00000001101", 56 => "11111110111", 57 => "11111100101", 
    58 => "11111100110", 59 => "11111110010", 60 => "11111111100", 
    61 => "11111111111", 62 to 64=> "00000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity in_out_c is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 65;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of in_out_c is
    component in_out_c_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    in_out_c_rom_U :  component in_out_c_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


