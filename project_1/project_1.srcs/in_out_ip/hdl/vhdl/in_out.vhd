-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity in_out is
generic (
    C_S_AXI_FIR_IO_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_FIR_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_up : IN STD_LOGIC_VECTOR (0 downto 0);
    s_down : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_fir_io_AWVALID : IN STD_LOGIC;
    s_axi_fir_io_AWREADY : OUT STD_LOGIC;
    s_axi_fir_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_fir_io_WVALID : IN STD_LOGIC;
    s_axi_fir_io_WREADY : OUT STD_LOGIC;
    s_axi_fir_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH-1 downto 0);
    s_axi_fir_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_fir_io_ARVALID : IN STD_LOGIC;
    s_axi_fir_io_ARREADY : OUT STD_LOGIC;
    s_axi_fir_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_fir_io_RVALID : OUT STD_LOGIC;
    s_axi_fir_io_RREADY : IN STD_LOGIC;
    s_axi_fir_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH-1 downto 0);
    s_axi_fir_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_fir_io_BVALID : OUT STD_LOGIC;
    s_axi_fir_io_BREADY : IN STD_LOGIC;
    s_axi_fir_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of in_out is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "in_out,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=317,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=7,HLS_SYN_FF=395,HLS_SYN_LUT=541,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal y : STD_LOGIC_VECTOR (15 downto 0);
    signal y_ap_vld : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (15 downto 0);
    signal m_flag : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_read_reg_415 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_326_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_s_reg_430 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_12_fu_330_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_reg_435 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_443 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_453 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_359_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_reg_463 : STD_LOGIC_VECTOR (30 downto 0);
    signal shift_reg_load_reg_468 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c_load_reg_473 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_403_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_reg_478 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_373_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_11_reg_483 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal acc_2_fu_378_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_index_loc_2_phi_fu_156_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal brmerge_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge1_cast_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_up_read_read_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_down_read_read_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_reg_168 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_reg_180 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_232_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_254_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp7_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_v_cast_ca_fu_270_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_297_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_301_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal storemerge1_fu_307_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_359_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_373_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_fu_383_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal acc_1_fu_387_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_condition_178 : BOOLEAN;
    signal ap_condition_162 : BOOLEAN;

    component in_out_mul_mul_11bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component in_out_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component in_out_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component in_out_fir_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        y : IN STD_LOGIC_VECTOR (15 downto 0);
        y_ap_vld : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    shift_reg_U : component in_out_shift_reg
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0);

    c_U : component in_out_c
    generic map (
        DataWidth => 11,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);

    in_out_fir_io_s_axi_U : component in_out_fir_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_FIR_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_FIR_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_fir_io_AWVALID,
        AWREADY => s_axi_fir_io_AWREADY,
        AWADDR => s_axi_fir_io_AWADDR,
        WVALID => s_axi_fir_io_WVALID,
        WREADY => s_axi_fir_io_WREADY,
        WDATA => s_axi_fir_io_WDATA,
        WSTRB => s_axi_fir_io_WSTRB,
        ARVALID => s_axi_fir_io_ARVALID,
        ARREADY => s_axi_fir_io_ARREADY,
        ARADDR => s_axi_fir_io_ARADDR,
        RVALID => s_axi_fir_io_RVALID,
        RREADY => s_axi_fir_io_RREADY,
        RDATA => s_axi_fir_io_RDATA,
        RRESP => s_axi_fir_io_RRESP,
        BVALID => s_axi_fir_io_BVALID,
        BREADY => s_axi_fir_io_BREADY,
        BRESP => s_axi_fir_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        y => y,
        y_ap_vld => y_ap_vld,
        x => x);

    in_out_mul_mul_11bkb_U1 : component in_out_mul_mul_11bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        dout_WIDTH => 27)
    port map (
        din0 => c_load_reg_473,
        din1 => shift_reg_load_reg_468,
        dout => tmp_fu_403_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                acc_reg_168 <= acc_2_fu_378_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                acc_reg_168 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_180 <= i_1_reg_443;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_180 <= ap_const_lv6_3F;
            end if; 
        end if;
    end process;

    index_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_162)) then 
                    index <= storemerge1_cast_fu_315_p1;
                elsif ((ap_const_boolean_1 = ap_condition_178)) then 
                    index <= storemerge_fu_278_p2;
                end if;
            end if; 
        end if;
    end process;

    m_flag_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (((or_cond4_fu_248_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (or_cond_fu_226_p2 = ap_const_lv1_0)) or ((or_cond4_fu_248_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (s_up_read_read_fu_98_p2 = ap_const_lv1_0)))) or ((or_cond_fu_226_p2 = ap_const_lv1_1) and (s_up_read_read_fu_98_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                m_flag <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (brmerge_fu_197_p2 = ap_const_lv1_0))) then 
                m_flag <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_load_reg_473 <= c_q0;
                shift_reg_load_reg_468 <= shift_reg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_8_fu_334_p2 = ap_const_lv1_0))) then
                i_1_reg_443 <= i_1_fu_340_p2;
                    tmp_10_reg_453(5 downto 0) <= tmp_10_fu_351_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_11_reg_483 <= tmp_11_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_12_reg_435 <= tmp_12_fu_330_p1;
                tmp_s_reg_430 <= tmp_s_fu_326_p1;
                x_read_reg_415 <= x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_463 <= tmp_1_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_reg_478 <= tmp_fu_403_p2;
            end if;
        end if;
    end process;
    tmp_10_reg_453(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_8_fu_334_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_8_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    acc_1_fu_387_p2 <= std_logic_vector(unsigned(tmp_13_fu_383_p1) - unsigned(tmp_1_reg_463));
    acc_2_fu_378_p2 <= std_logic_vector(unsigned(acc_reg_168) + unsigned(tmp_11_reg_483));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_condition_162_assign_proc : process(brmerge_fu_197_p2, s_up_read_read_fu_98_p2, or_cond_fu_226_p2)
    begin
                ap_condition_162 <= ((or_cond_fu_226_p2 = ap_const_lv1_1) and (s_up_read_read_fu_98_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1));
    end process;


    ap_condition_178_assign_proc : process(brmerge_fu_197_p2, s_up_read_read_fu_98_p2, or_cond_fu_226_p2, s_down_read_read_fu_92_p2, or_cond4_fu_248_p2)
    begin
                ap_condition_178 <= (((or_cond4_fu_248_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (or_cond_fu_226_p2 = ap_const_lv1_0)) or ((or_cond4_fu_248_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (s_up_read_read_fu_98_p2 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_index_loc_2_phi_fu_156_p10_assign_proc : process(ap_CS_fsm_state1, index, brmerge_fu_197_p2, storemerge1_cast_fu_315_p1, s_up_read_read_fu_98_p2, or_cond_fu_226_p2, storemerge_fu_278_p2, s_down_read_read_fu_92_p2, or_cond4_fu_248_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (((or_cond4_fu_248_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (or_cond_fu_226_p2 = ap_const_lv1_0)) or ((or_cond4_fu_248_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (s_up_read_read_fu_98_p2 = ap_const_lv1_0))))) then 
            ap_phi_mux_index_loc_2_phi_fu_156_p10 <= storemerge_fu_278_p2;
        elsif (((or_cond_fu_226_p2 = ap_const_lv1_1) and (s_up_read_read_fu_98_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_index_loc_2_phi_fu_156_p10 <= storemerge1_cast_fu_315_p1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (((brmerge_fu_197_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_0) and (or_cond_fu_226_p2 = ap_const_lv1_0)) or ((brmerge_fu_197_p2 = ap_const_lv1_1) and (s_down_read_read_fu_92_p2 = ap_const_lv1_0) and (s_up_read_read_fu_98_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (((s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (or_cond4_fu_248_p2 = ap_const_lv1_0) and (or_cond_fu_226_p2 = ap_const_lv1_0)) or ((s_down_read_read_fu_92_p2 = ap_const_lv1_1) and (brmerge_fu_197_p2 = ap_const_lv1_1) and (or_cond4_fu_248_p2 = ap_const_lv1_0) and (s_up_read_read_fu_98_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (brmerge_fu_197_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_index_loc_2_phi_fu_156_p10 <= index;
        else 
            ap_phi_mux_index_loc_2_phi_fu_156_p10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge_fu_197_p2 <= (s_up or s_down);
    c_address0 <= tmp_10_fu_351_p1(7 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_340_p2 <= std_logic_vector(unsigned(i_reg_180) + unsigned(ap_const_lv6_3F));
    icmp7_fu_264_p2 <= "1" when (signed(tmp_7_fu_254_p4) > signed(ap_const_lv29_0)) else "0";
    icmp_fu_242_p2 <= "1" when (signed(tmp_6_fu_232_p4) > signed(ap_const_lv31_0)) else "0";
    or_cond4_fu_248_p2 <= (m_flag and icmp_fu_242_p2);
    or_cond_fu_226_p2 <= (tmp_3_fu_220_p2 and m_flag);
    s_down_read_read_fu_92_p2 <= s_down;
    s_up_read_read_fu_98_p2 <= s_up;

    shift_reg_address0_assign_proc : process(ap_CS_fsm_state2, tmp_8_fu_334_p2, tmp_10_reg_453, ap_CS_fsm_state3, tmp_2_fu_346_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address0 <= tmp_10_reg_453(6 - 1 downto 0);
        elsif (((tmp_8_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shift_reg_address0 <= ap_const_lv6_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_8_fu_334_p2 = ap_const_lv1_0))) then 
            shift_reg_address0 <= tmp_2_fu_346_p1(6 - 1 downto 0);
        else 
            shift_reg_address0 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_8_fu_334_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_8_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_8_fu_334_p2 = ap_const_lv1_0)))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(shift_reg_q0, x_read_reg_415, ap_CS_fsm_state2, tmp_8_fu_334_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_d0 <= shift_reg_q0;
        elsif (((tmp_8_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shift_reg_d0 <= x_read_reg_415;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(ap_CS_fsm_state2, tmp_8_fu_334_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_8_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            shift_reg_we0 <= ap_const_logic_1;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge1_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge1_fu_307_p3),32));
    storemerge1_fu_307_p3 <= 
        ap_const_lv7_5 when (tmp_4_fu_291_p2(0) = '1') else 
        tmp_5_cast_fu_301_p2;
    storemerge_fu_278_p2 <= std_logic_vector(unsigned(storemerge_v_cast_ca_fu_270_p3) + unsigned(index));
    storemerge_v_cast_ca_fu_270_p3 <= 
        ap_const_lv32_FFFFFFFB when (icmp7_fu_264_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFE;
    tmp_10_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_180),64));
    tmp_11_fu_373_p0 <= tmp_s_reg_430(32 - 1 downto 0);
    tmp_11_fu_373_p1 <= tmp_reg_478;
    tmp_11_fu_373_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_11_fu_373_p0) * signed(tmp_11_fu_373_p1))), 38));
    tmp_12_fu_330_p1 <= ap_phi_mux_index_loc_2_phi_fu_156_p10(31 - 1 downto 0);
    tmp_13_fu_383_p1 <= acc_reg_168(31 - 1 downto 0);
    tmp_1_fu_359_p0 <= x_read_reg_415;
    tmp_1_fu_359_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_fu_359_p0) * signed(tmp_12_reg_435))), 31));
    tmp_2_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_340_p2),64));
    tmp_3_fu_220_p2 <= "1" when (signed(index) < signed(ap_const_lv32_3C)) else "0";
    tmp_4_fu_291_p2 <= "1" when (signed(index) < signed(ap_const_lv32_5)) else "0";
    tmp_5_cast_fu_301_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(tmp_5_fu_297_p1));
    tmp_5_fu_297_p1 <= index(7 - 1 downto 0);
    tmp_6_fu_232_p4 <= index(31 downto 1);
    tmp_7_fu_254_p4 <= index(31 downto 3);
    tmp_8_fu_334_p2 <= "1" when (i_reg_180 = ap_const_lv6_0) else "0";
        tmp_s_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_index_loc_2_phi_fu_156_p10),38));

    y <= acc_1_fu_387_p2(30 downto 15);

    y_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
