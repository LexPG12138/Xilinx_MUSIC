// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XIN_OUT_H
#define XIN_OUT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xin_out_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Fir_io_BaseAddress;
} XIn_out_Config;
#endif

typedef struct {
    u32 Fir_io_BaseAddress;
    u32 IsReady;
} XIn_out;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XIn_out_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XIn_out_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XIn_out_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XIn_out_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XIn_out_Initialize(XIn_out *InstancePtr, u16 DeviceId);
XIn_out_Config* XIn_out_LookupConfig(u16 DeviceId);
int XIn_out_CfgInitialize(XIn_out *InstancePtr, XIn_out_Config *ConfigPtr);
#else
int XIn_out_Initialize(XIn_out *InstancePtr, const char* InstanceName);
int XIn_out_Release(XIn_out *InstancePtr);
#endif

void XIn_out_Start(XIn_out *InstancePtr);
u32 XIn_out_IsDone(XIn_out *InstancePtr);
u32 XIn_out_IsIdle(XIn_out *InstancePtr);
u32 XIn_out_IsReady(XIn_out *InstancePtr);
void XIn_out_EnableAutoRestart(XIn_out *InstancePtr);
void XIn_out_DisableAutoRestart(XIn_out *InstancePtr);

u32 XIn_out_Get_y(XIn_out *InstancePtr);
u32 XIn_out_Get_y_vld(XIn_out *InstancePtr);
void XIn_out_Set_x(XIn_out *InstancePtr, u32 Data);
u32 XIn_out_Get_x(XIn_out *InstancePtr);

void XIn_out_InterruptGlobalEnable(XIn_out *InstancePtr);
void XIn_out_InterruptGlobalDisable(XIn_out *InstancePtr);
void XIn_out_InterruptEnable(XIn_out *InstancePtr, u32 Mask);
void XIn_out_InterruptDisable(XIn_out *InstancePtr, u32 Mask);
void XIn_out_InterruptClear(XIn_out *InstancePtr, u32 Mask);
u32 XIn_out_InterruptGetEnabled(XIn_out *InstancePtr);
u32 XIn_out_InterruptGetStatus(XIn_out *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
